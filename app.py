from parameters import *
from functions import *
import streamlit as st
import pandas as pd
from sklearn.neighbors import NearestNeighbors
import warnings
warnings.filterwarnings("ignore")

st.set_page_config(
        page_title="NBA Player Similarity App",
        layout="wide"
    )

df = get_normalized_stats()
#df_percentage_difference = get_percentage_differences()
df_bios_contracts = get_bio_contracts()
df_stats = get_stats()
df_percentiles = get_percentiles()



with st.sidebar:
    player = st.selectbox("Pick a player", list(df.index))
    threshold = st.number_input('Threshold for cosine similarity', min_value=-1.0, max_value=1.0, value=0.7)
    st.divider()
    st.sidebar.info("This is an application that tries to find similar NBA players. It takes the stats per game of the 2022-2023 regular season of each player and gets the cosine similarity between each of the them. Twenty-seven variables are taken into account in order to find substitute players with the same players' style of play.")

results = find_similar_players(
    player=player,
    columns=columns_streamlit,
    df=df,
    df_bios_contracts=df_bios_contracts,
    df_stats=df_stats,
    threshold = threshold
    )

st.title('NBA Player Similarity App')
st.divider()
st.metric(label='Position',value=df_bios_contracts[df_bios_contracts['Player']==player]['Player'].values[0], label_visibility='hidden')

#player_salary = float(df_bios_contracts[df_bios_contracts['Player']==player]['2023-24 Salary'].values[0].replace('$', '').replace(',', ''))
player_salary = get_player_salary(df_bios_contracts, player)

df_bios_contracts['2023-24 Salary'] = df_bios_contracts['2023-24 Salary'].dropna().apply(format_salary)

col1, col2, col3, col4 = st.columns([0.25,0.20,0.3,0.25])
with col1:
    st.image(df_bios_contracts[df_bios_contracts['Player']==player]['Player Image'].to_list(), width=200)

with col2:
    st.metric(label='Position', value=map_position(df_bios_contracts[df_bios_contracts['Player']==player]['Position'].values[0]))
    st.metric(label='2023-24 Salary', value=df_bios_contracts[df_bios_contracts['Player']==player]['2023-24 Salary'].values[0])
    st.metric(label = 'Height CM / Weight KG', value=f"{int(df_bios_contracts[df_bios_contracts['Player']==player]['Height'])}/{int(df_bios_contracts[df_bios_contracts['Player']==player]['Weight'])}")
    st.metric(label='Age' ,value=int(df_bios_contracts[df_bios_contracts['Player']==player]['Date Born'].apply(calculate_age).values[0]))

with col3:
    col5, col6 = st.columns(2)
    with col5:
        st.metric(label='PTS' ,value=df_stats[df_stats.index==player]['PTS'], help='Points')
        st.metric(label='AST' ,value=df_stats[df_stats.index==player]['AST'], help='Assists')
        st.metric(label='ORB' ,value=df_stats[df_stats.index==player]['ORB'], help='Offensive Rebounds')
        st.metric(label='BLK' ,value=df_stats[df_stats.index==player]['BLK'], help='Blocks')
    
    with col6:
        st.metric(label='2P%' ,value=round(df_stats[df_stats.index==player]['2P Shots Attempted %']*100,2), help='2P Shots Attempted %')
        st.metric(label='PGA' ,value=df_stats[df_stats.index==player]['PGA'], help='Points generated by Assists')
        st.metric(label='DRB' ,value=df_stats[df_stats.index==player]['DRB'], help='Defensive Rebounds')
        st.metric(label='And1' ,value=df_stats[df_stats.index==player]['And1'], help='Field goals on which the player is fouled')

with col4:
    col6, col7 = st.columns([0.35,0.65])
    with col6:
        st.metric(label='3P%' ,value=round(df_stats[df_stats.index==player]['3P Shots Attempted %']*100,2), help='3P Shots Attempted %')
        st.metric(label='STL' ,value=df_stats[df_stats.index==player]['STL'], help='Steals')
        st.metric(label='TOV' ,value=df_stats[df_stats.index==player]['TOV'], help='Turnovers')
        st.metric(label='BLK received' ,value=df_stats[df_stats.index==player]['Blkd'], help='Field goals attempts that are blocked')
    with col7:
        st.write(f'''
                 Stronger stats
- {df[columns_streamlit].loc[player].nlargest(10).index[0]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[0]].loc[player]*100,0))}ile
- {df[columns_streamlit].loc[player].nlargest(10).index[1]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[1]].loc[player]*100,0))}ile
- {df[columns_streamlit].loc[player].nlargest(10).index[2]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[2]].loc[player]*100,0))}ile
- {df[columns_streamlit].loc[player].nlargest(10).index[3]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[3]].loc[player]*100,0))}ile
- {df[columns_streamlit].loc[player].nlargest(10).index[4]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[4]].loc[player]*100,0))}ile
- {df[columns_streamlit].loc[player].nlargest(10).index[5]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[5]].loc[player]*100,0))}ile
- {df[columns_streamlit].loc[player].nlargest(10).index[6]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[6]].loc[player]*100,0))}ile
- {df[columns_streamlit].loc[player].nlargest(10).index[7]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[7]].loc[player]*100,0))}ile
- {df[columns_streamlit].loc[player].nlargest(10).index[8]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[8]].loc[player]*100,0))}ile
- {df[columns_streamlit].loc[player].nlargest(10).index[9]}  -  {int(round(df_percentiles[df[columns_streamlit].loc[player].nlargest(10).index[9]].loc[player]*100,0))}ile
''')




salaries = results['2023-24 Salary'].apply(convert_number).dropna()

results['2023-24 Salary'] = results['2023-24 Salary'].apply(convert_number).dropna()
bargain_player = np.where(results['2023-24 Salary'] < player_salary,'background-color: green','')
results['2023-24 Salary'] = results['2023-24 Salary'].fillna('Free Agent')



st.divider()
st.subheader('Summary')
col8, col9, col10, col11 = st.columns(4)
with col8:
    st.metric(label='Number of Players',value=len(results))
    st.metric(label='Average Age',value=round(results['Age'].mean(),1))  

with col10:
    st.metric(label='Average Similarity',value=round(results['Similarity'].mean(),4))
    st.metric(label='Standard Deviation Similarity',value=round(results['Similarity'].std(),4))

with col9:
    st.metric(label='Maximum Similarity',value=round(results['Similarity'].max(),4))
    st.metric(label='Minimum Similarity',value=round(results['Similarity'].min(),4))

with col11:
    st.metric(label='Average Salary',value='${:,.2f} M'.format(round(salaries.mean()/1000000.0,2)))
    st.metric(label='Standard Deviation Salary',value='${:,.2f} M'.format(round(salaries.std()/1000000.0,2)))

st.divider()
st.subheader('Players Similarity')





results['2023-24 Salary'] = results['2023-24 Salary'].apply(salary_format)
results['Position'] = results['Position'].apply(map_position)


free_agent_value = np.where(results['2023-24 Salary'] == 'Free Agent','background-color: yellow','')



st.dataframe(results.style.format({'Salary 2023-24': "${:,.2f} M",
                                   'Similarity': '{:,.4f}',
                                   'DBPM': '{:,.2f}',
                                   'FG%':'{:,.2f}',
                                   'eFG%': '{:,.2f}',
                                   '2P%': '{:,.2f}',
                                   '2P Shots Attempted %': '{:,.2f}',
                                   'ORB': '{:,.2f}',
                                   'LostBall': '{:,.2f}',
                                   'TOV': '{:,.2f}',
                                   'Blkd': '{:,.2f}',
                                   'STL': '{:,.2f}',
                                   'PTS': '{:,.2f}',
                                   '3P%': '{:,.2f}',
                                   'BLK': '{:,.2f}',
                                   'Fouls Commited Off': '{:,.2f}',
                                   '3P Shots Attempted %': '{:,.2f}',
                                   'PF Efficiency': '{:,.2f}',
                                   'Fouls Drawn Shoot': '{:,.2f}',
                                   'BadPass': '{:,.2f}',
                                   'FT%': '{:,.2f}',
                                   'OBPM': '{:,.2f}',
                                   'Fouls Drawn Off': '{:,.2f}',
                                   'And1': '{:,.2f}',
                                   'PGA': '{:,.2f}',
                                   'DRB': '{:,.2f}',
                                   'Fouls Commited Shoot': '{:,.2f}',
                                   'PER': '{:,.2f}',
                                   'AST': '{:,.2f}'
                                   }).apply(lambda _: bargain_player, subset='Player').apply(lambda _: free_agent_value, subset='Player'),
                hide_index=True, height=(35*(len(results)+1)+15))


